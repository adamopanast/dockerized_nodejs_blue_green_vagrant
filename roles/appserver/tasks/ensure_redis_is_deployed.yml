---

- name: ensure_redis_storage_folder_exists
  become: yes
  file:
    path: "{{ redis_storage }}"
    state: directory 
    owner: root
    group: root
    mode: 0775

- name: ensure_redis_landing_folder_exists
  become: yes
  file:
    path: /opt/redis
    state: directory

- name: ensure_redis_conf_file_is_deployed
  become: yes
  template: src=redis.conf.j2 dest=/opt/redis/redis.conf 

- name: ensure_Dockerfile_is_deployed
  become: yes
  template: src=redisDockerfile.j2 dest=/opt/redis/Dockerfile

# - name: Check_for_containers_that_actually_exist
#   become: yes
#   shell: 'docker ps -aq --filter "name=redis-server"'
#   register: found_containers

# - name: Remove the containers found by the above command
#   become: yes
#   shell: 'docker stop {{ item }} && docker rm -fv {{ item}}'
#   with_items: '{{ found_containers.stdout }}'
#   when: found_containers

- name: build docker image
  become: yes
  docker_image:
    name: redis-server
    path: /opt/redis
    nocache: yes
    rm: yes
    state: present
    tag: redis-server
    force: true
  register: image_build
 # changed_when: image_id.stdout != image_build.image.Id

- name: create container
  become: yes
  docker_container:
    name: redis-instance
    image: redis-server:redis-server
    recreate: '{{ True if image_build.changed else omit }}'
    state: started
    restart: yes
    ports:
      - "{{ redis_port }}:{{ redis_port }}"  